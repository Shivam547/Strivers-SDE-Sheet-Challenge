#include<bits/stdc++.h>
bool detectcycle(vector<int>& vis, vector<vector<int>>& adj, int sc){
    vis[sc]=1;
    queue<pair<int,int>>q;
    q.push({sc, -1});
    while(!q.empty()){
        int node=q.front().first;
        int parent=q.front().second;
        q.pop();
        for(auto it:adj[node]){
            if(!vis[it]){
                vis[it]=1;
                q.push({it, node});
            }
            else if(parent!=it){
                return true;
            }
        }
    }
    return false;
}


string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    vector<vector<int>>adj(n+1);
    for(int i=0;i<edges.size();i++){
        int u=edges[i][0];
        int v=edges[i][1];
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    vector<int>vis(n+1,0);
    for(int i=1;i<=n;i++){
        if(!vis[i]){
            if(detectcycle(vis, adj, i)==true){
                return "Yes";
            }
        }
    }
    return "No";
}
