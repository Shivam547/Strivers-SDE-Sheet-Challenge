#include <bits/stdc++.h> 

long long merge (long long *arr,long long low,long long mid,long long high){

    long long count = 0;
    int i = low;
    int j = mid + 1;
    vector<int> temp;
    while (i<=mid && j <= high){
        if (arr[i]<=arr[j]){
            temp.push_back(arr[i]);
            i++;
        }
        else {
            temp.push_back (arr[j]);
            j++;
            count += (mid - i + 1);
        }
    }
    while (i<=mid){
        temp.push_back(arr[i]);
        i++;
    }
    while (j<=high){
        temp.push_back(arr[j]);
        j++;
    }
    for (int i=low;i<=high;i++) 
        arr[i] = temp [i - low];       
    return count;
}

long long mergesort(long long *arr,long long low,long long high){
    long long count = 0;
    if (low >= high) {
      return count;
    }
    long long mid = low+((high-low)/2);
    count += mergesort(arr, low, mid);
    count += mergesort(arr, mid + 1, high);
    count += merge(arr, low, mid, high);
    return count;
}

long long getInversions(long long *arr, int n){
    long long count = 0;
    count = mergesort(arr,0,n-1);
    return count;
}
