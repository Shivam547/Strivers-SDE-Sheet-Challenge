//APPROACH-1->DFS
bool check(vector<int>& color, vector<int> adj[], int node, int chcolor){
	color[node]=chcolor;
	for(auto it:adj[node]){
		if(color[it]==-1){
			if(check(color, adj, it, !chcolor)==false){
				return false;
			}
		}
		else if(color[it]==chcolor){
			return false;
		}
	}
	return true;
}

bool isGraphBirpatite(vector<vector<int>> &edges) {
	int n=edges.size();
	int m=edges[0].size();
	vector<int>adj[n];
	for(int i=0;i<n;i++){
		for(int j=0;j<m;j++){
			if(edges[i][j]){
				adj[i].push_back(j);
				adj[j].push_back(i);
			}
		}
	}
	vector<int>color(n, -1);
	for(int i=0;i<n;i++){
		if(color[i]==-1){
			if(check(color, adj, i, 0)==false){
				return false;
			}
		}
	}
	return true;
}
//APPROACH-2->BFS
#include<bits/stdc++.h>

bool check(vector<int>& color, vector<int> adj[], int sc){
	color[sc]=0;
	queue<int>q;
	q.push(sc);
	while(!q.empty()){
		int node=q.front();
		q.pop();
		for(auto it:adj[node]){
			if(color[it]==-1){
				color[it]=!color[node];
				q.push(it);
			}
			else if(color[it]==color[node]){
				return false;
			}
		}
	}
	return true;
}

bool isGraphBirpatite(vector<vector<int>> &edges) {
	int n=edges.size();
	int m=edges[0].size();
	vector<int>adj[n];
	for(int i=0;i<n;i++){
		for(int j=0;j<m;j++){
			if(edges[i][j]){
				adj[i].push_back(j);
				adj[j].push_back(i);
			}
		}
	}
	vector<int>color(n,-1);
	for(int i=0;i<n;i++){
		if(color[i]==-1){
			// color[i]=0;
			// queue<int>q;
			// q.push(i);
			// while(!q.empty()){
			// 	int node=q.front();
			// 	q.pop();
			// 	for(auto it:adj[node]){
			// 		if(color[it]==-1){
			// 			color[it]=!color[node];
			// 			q.push(it);
			// 		}
			// 		else if(color[it]==color[node]){
			// 			return false;
			// 		}
			// 	}
			// }
			if(check(color, adj, i)==false){
				return false;
			}
		}
	}
	return true;
}
