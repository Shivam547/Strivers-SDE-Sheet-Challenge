TC-O(N^2)
#include<bits/stdc++.h>
void addsoln(vector<vector<int>>& ans, vector<vector<int>>& board, int n){
	vector<int>temp;
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			temp.push_back(board[i][j]);
		}
	}
	ans.push_back(temp);
}
bool issafe(int row, int col, vector<vector<int>>& ans, vector<vector<int>>& board, int n){
	int x=row;
	int y=col;
	// left upside diagonal
	while(row>=0 && col>=0){
		if(board[row][col]==1){
			return false;
		}
		row--;
		col--;
	}
	row=x;
	col=y;
	// same left row
	while(col>=0){
		if(board[row][col]==1){
			return false;
		}
		col--;
	}
	row=x;
	col=y;
	// left downside diagonal
	while(row<n && col>=0){
		if(board[row][col]==1){
			return false;
		}
		row++;
		col--;
	}
	return true;
}
void solve(int col, vector<vector<int>>& ans, vector<vector<int>>& board, int n){
	if(col==n){
		addsoln(ans, board, n);
		return ;
	}
	for(int row=0;row<n;row++){
		if(issafe(row, col, ans, board, n)){
			board[row][col]=1;
			solve(col+1, ans, board, n);
			board[row][col]=0;
		}
	}
}

vector<vector<int>> solveNQueens(int n) {
    vector<vector<int>>ans;
	vector<vector<int>>board(n, vector<int>(n, 0));
	solve(0, ans, board, n);
	return ans;
}
