#include<bits/stdc++.h>
void solve(int& node, vector<int>& vis, vector<int>& dfs, vector<int> adj[]){
    vis[node]=1;
    dfs.push_back(node);
    for(auto it:adj[node]){
        if(!vis[it]){
            solve(it, vis, dfs, adj);
        }
    }
}


vector<vector<int>> depthFirstSearch(int V, int E, vector<vector<int>> &edges)
{
    vector<int>adj[V];
    for(int i=0;i<edges.size();i++){
        int u=edges[i][0];
        int v=edges[i][1];
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    for(int i=0;i<V;i++){
        sort(adj[i].begin(), adj[i].end());
    }
    vector<int>vis(V,0);
    vector<vector<int>>ans;
    for(int i=0;i<V;i++){
        if(!vis[i]){
            vector<int>dfs;
            solve(i, vis, dfs, adj);
            ans.push_back(dfs);
        }
    }
    return ans;
}
