//APPROACH-1->DFS ALGO
#include <bits/stdc++.h> 
void dfscheck(vector<int>& vis, vector<int> adj[], stack<int>& s, int node){
    vis[node]=1;
    for(auto it:adj[node]){
        if(!vis[it]){
            dfscheck(vis, adj, s, it);
        }
    }
    s.push(node);
}
vector<int> topologicalSort(vector<vector<int>> &edges, int v, int e)  {
    vector<int>adj[v+1];
    int n=edges.size();
    for(int i=0;i<n;i++){
        int u=edges[i][0];
        int v=edges[i][1];
        adj[u].push_back(v);
    }
    vector<int>vis(v,0);
    stack<int>s;
    for(int i=0;i<v;i++){
        if(!vis[i]){
            dfscheck(vis, adj, s, i);
        }
    }

    vector<int>ans;

    while(!s.empty()){
        ans.push_back(s.top());
        s.pop();
    }
    return ans;
}

//APPROACH-2->BFS ALGO (Kahn's Algo)
#include <bits/stdc++.h> 
vector<int> topologicalSort(vector<vector<int>> &edges, int v, int e)  {
    vector<int>adj[v+1];
    for(int i=0;i<edges.size();i++){
        int u=edges[i][0];
        int v=edges[i][1];
        adj[u].push_back(v);
    }

    queue<int>q;
    vector<int>indegree(v,0);
    for(int i=0;i<v;i++){
        for(auto it:adj[i]){
            indegree[it]++;
        }
    }
    for(int i=0;i<v;i++){
        if(indegree[i]==0){
            q.push(i);
        }
    }
    vector<int>ans;
    while(!q.empty()){
        int node=q.front();
        ans.push_back(node);
        q.pop();
        for(auto it:adj[node]){
            indegree[it]--;
            if(indegree[it]==0){
                q.push(it);
            }
        }
    }
    return ans;
}
