APPROACH-1> TC-O(N) && SC-O(N)
void inorder(BinaryTreeNode<int> *root, vector<int>& v){
    if(root==NULL){
        return ;
    }
    inorder(root->left, v);
    v.push_back(root->data);
    inorder(root->right, v);
}
bool pairSumBst(BinaryTreeNode<int> *root, int k)
{
    vector<int>v;
    inorder(root, v);
    int i=0;
    int j=v.size()-1;
    while(i<j){
        int sum=v[i]+v[j];
        if(sum==k){
            return true;
        }
        else if(sum>k){
            j--;
        }
        else{
            i++;
        }
    }
    return false;
}
APPROACH-2-> TC-O(N) && SC->O(1)
void solve(BinaryTreeNode<int> *root, unordered_map<int, int>& m, int k, bool& ans){
    if(root==NULL){
        return;
    }
    int check=k-root->data;
    if(m.find(check)!=m.end()){
        ans=true;
    }
    m[root->data]=1;
    solve(root->left, m, k, ans);
    solve(root->right, m, k, ans);
}
bool pairSumBst(BinaryTreeNode<int> *root, int k)
{
    unordered_map<int,int>m;
    m[root->data]=1;
    bool ans=false;
    solve(root, m, k, ans);
    return ans;
}
